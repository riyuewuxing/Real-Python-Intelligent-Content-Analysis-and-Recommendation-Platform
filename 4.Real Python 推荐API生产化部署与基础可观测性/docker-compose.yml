version: '3.8'

services:
  # API后端服务
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: real-python-api
    ports:
      - "8000:8000"
    volumes:
      # 挂载数据文件，便于数据更新
      - ../shared_data:/shared_data:ro
    environment:
      - PYTHONPATH=/app
      - NLTK_DATA=/home/appuser/nltk_data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - real-python-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Streamlit前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: real-python-frontend
    ports:
      - "8501:8501"
    volumes:
      # 挂载数据文件到前端，用于数据分析
      - ../shared_data:/shared_data:ro
    environment:
      # 设置API的内部服务地址
      - API_BASE_URL=http://api:8000
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - real-python-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Nginx反向代理（可选，用于生产环境）
  nginx:
    image: nginx:alpine
    container_name: real-python-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - api
    restart: unless-stopped
    networks:
      - real-python-network
    profiles:
      - production  # 只在production profile下启动

networks:
  real-python-network:
    driver: bridge
    name: real-python-network

volumes:
  nltk_data:
    name: real-python-nltk-data 